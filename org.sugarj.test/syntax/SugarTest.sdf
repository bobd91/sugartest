%% Grammar for the SugarTest language
%% Modified copy of Stratego Test language
module SugarTest

imports Common
imports languages/aterm/syntax/ATerms

exports
  context-free start-symbols TestSuite

exports
  sorts TestSuite Setup Test Input Output Result
  context-free syntax
    Language SetupDecl? TestDecl*   -> TestSuite {cons("TestSuite")}
    "language" ID      -> Language {cons("Language")}

  "setup" Setup -> SetupDecl {cons("SetupDecl")}
  
  %% The description syntax is very ambiguous if comments are allowed around it. So, we forbid comments.
  syntax
    
    "test" <OptSpace-LEX> <Description-CF> <LAYOUT?-CF> <Test-CF> -> <TestDecl-CF> {cons("TestDecl")}
    "test" <OptSpace-LEX> <Description-CF> -> <TestDecl-CF> {cons("TestDeclEmpty")}

  context-free syntax
    Input Result -> Test {cons("Test")}
    
  lexical syntax
    [\ ]+   -> OptSpace
    NoSpace -> OptSpace
            -> NoSpace

  lexical restrictions
    OptSpace -/- [\ ]
    NoSpace  -/- ~[\[].~[\[]

  context-free syntax
                               -> Result {cons("SuccessParsing"), avoid}
    "parse"                    -> Result {cons("SuccessParsing")}
    "parse" "succeeds"         -> Result {cons("SuccessParsing"), prefer}
    "parse" "fails"            -> Result {cons("FailsParsing")}
    "parse" "to" ATerm         -> Result {cons("ParsePattern")}
    "parse" "to" Output        -> Result {cons("ParseOutput")}
    "parse" "contains" ATerm   -> Result {cons("ParseContainsPattern")}
    "desugar" "to" Output      -> Result {cons("DesugarOutput")}
    "desugar" "contains" ATerm -> Result {cons("DesugarContainsPattern")}
    
  context-free syntax

    "_"                  -> ATerm  {cons("wildcard")}
    "..."                -> { ATerm ","}+ {cons("wildcardvar")}

  syntax
      
    <Bracket2-LEX> <SetupPart2-CF> <CBracket2-CF> -> <Setup-CF> {cons("Setup")}
    <Bracket3-LEX> <SetupPart3-CF> <CBracket3-CF> -> <Setup-CF> {cons("Setup")}
    <Bracket4-LEX> <SetupPart4-CF> <CBracket4-CF> -> <Setup-CF> {cons("Setup")}
    
    <StringPart2-CF> <TestPlaceholder2-CF> <StringPart2-CF> -> <SetupPart2-CF> {cons("SetupPart")}
    <StringPart3-CF> <TestPlaceholder3-CF> <StringPart3-CF> -> <SetupPart3-CF> {cons("SetupPart")}
    <StringPart4-CF> <TestPlaceholder4-CF> <StringPart4-CF> -> <SetupPart4-CF> {cons("SetupPart")}

    <StringPart2-CF> -> <SetupPart2-CF> {cons("SetupPart")}
    <StringPart3-CF> -> <SetupPart3-CF> {cons("SetupPart")}
    <StringPart4-CF> -> <SetupPart4-CF> {cons("SetupPart")}

    <Bracket2-LEX> <StringPart2-CF> <CBracket2-CF> -> <Input-CF> {cons("Input")}
    <Bracket3-LEX> <StringPart3-CF> <CBracket3-CF> -> <Input-CF> {cons("Input")}
    <Bracket4-LEX> <StringPart4-CF> <CBracket4-CF> -> <Input-CF> {cons("Input")}

    <Bracket2-LEX> <StringPart2-CF> <CBracket2-CF> -> <Output-CF> {cons("Output")}
    <Bracket3-LEX> <StringPart3-CF> <CBracket3-CF> -> <Output-CF> {cons("Output")}
    <Bracket4-LEX> <StringPart4-CF> <CBracket4-CF> -> <Output-CF> {cons("Output")}
    
    <InputChars2-LEX> -> <StringPart2-CF> {cons("QuotePart")}
    <InputChars3-LEX> -> <StringPart3-CF> {cons("QuotePart")}
    <InputChars4-LEX> -> <StringPart4-CF> {cons("QuotePart")}
    
    <Bracket2-LEX> <Ellipsis-CF> <CBracket2-CF>-> <TestPlaceholder2-CF> {cons("TestPlaceholder")}
    %%<TestPlaceholder3-LEX> -> <TestPlaceholder3-CF> {cons("TestPlaceholder")}
    %%<TestPlaceholder4-LEX> -> <TestPlaceholder4-CF> {cons("TestPlaceholder")}

     
  context-free syntax
  	
  	
    EOLString -> Description {cons("description")}

  lexical syntax

    (~[\n\[\"]|EOLQuote1)* -> EOLString
    [\"]                   -> EOLQuote1
    
  lexical syntax

    (~[\[\]]  | Bracket1 | CBracket1)*                         -> InputChars2
    (~[\[\]]  | Bracket1 | Bracket2 | CBracket1 | CBracket2)*  -> InputChars3
    (~[\[\]]  | Bracket1 | Bracket2 | Bracket3 
              | CBracket1 | CBracket2 | CBracket3)*            -> InputChars4

    "["    -> Bracket1
    "[["   -> Bracket2
    "[[["  -> Bracket3
    "[[[[" -> Bracket4

    "]"    -> CBracket1
    "]]"   -> CBracket2
    "]]]"  -> CBracket3
    "]]]]" -> CBracket4
    
    %%Bracket2 Ellipsis CBracket2 -> TestPlaceholder2
    Bracket3 Ellipsis CBracket3 -> TestPlaceholder3
    Bracket4 Ellipsis CBracket4 -> TestPlaceholder4
    
   "..." -> Ellipsis
    
  lexical restrictions
    EOLString -/- ~[\n\[\"]
    EOLQuote1 -/- [\"]
    
    Bracket1   -/- [\[].~[\[]
    Bracket2   -/- [\[].~[\[]
    Bracket3   -/- [\[].~[\[]

    CBracket1   -/- [\]]
    CBracket2   -/- [\]]
    CBracket3   -/- [\]]

  sorts ShortCom LongCom CommChar Asterisk 
  lexical syntax
    "//" ~[\n]* ([\n] | EOF) -> ShortCom
    "/*" CommChar* "*/"      -> LongCom

    ~[\*]      -> CommChar

    "*"        -> Asterisk
    Asterisk   -> CommChar

  lexical restrictions
    Asterisk -/- [\/]

  lexical syntax
    ShortCom    -> LAYOUT
    LongCom     -> LAYOUT
   
  context-free restrictions
    LAYOUT? -/- [\/]/[\/]
    LAYOUT? -/- [\/].[\*]

