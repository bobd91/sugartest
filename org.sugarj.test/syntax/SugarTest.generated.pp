[
   RegexPattern              -- KW["/"] _1 KW["/"],
   SingleBranch              -- _1,
   TupleBranch               -- _1 KW["|"] _2,
   Pieces                    -- _1,
   Pieces.1:iter             -- _1,
   SingleAtom                -- _1,
   QuantifiedAtom            -- _1 _2,
   GreedyExactBound          -- KW["{"] _1 KW["}"],
   GreedyLowerBound          -- KW["{"] _1 KW[","] KW["}"],
   GreedyLowerUpperBound     -- KW["{"] _1 KW[","] _2 KW["}"],
   GreedyOnceOrNot           -- KW["?"],
   GreedyZeroOrMore          -- KW["*"],
   GreedyOneOrMore           -- KW["+"],
   ReluctantExactBound       -- KW["{"] _1 KW["}?"],
   ReluctantLowerBound       -- KW["{"] _1 KW[","] KW["}?"],
   ReluctantLowerUpperBound  -- KW["{"] _1 KW[","] _2 KW["}?"],
   ReluctantOnceOrNot        -- KW["??"],
   ReluctantZeroOrMore       -- KW["*?"],
   ReluctantOneOrMore        -- KW["+?"],
   PossessiveExactBound      -- KW["{"] _1 KW["}+"],
   PossessiveLowerBound      -- KW["{"] _1 KW[","] KW["}+"],
   PossessiveLowerUpperBound -- KW["{"] _1 KW[","] _2 KW["}+"],
   PossessiveOnceOrNot       -- KW["?+"],
   PossessiveZeroOrMore      -- KW["*+"],
   PossessiveOneOrMore       -- KW["++"],
   Capture                   -- KW["("] _1 KW[")"],
   NonCapture                -- KW["(?:"] _1 KW[")"],
   PositiveLookahead         -- KW["(?="] _1 KW[")"],
   NegativeLookahead         -- KW["(?!"] _1 KW[")"],
   PositiveLookbehind        -- KW["(?<="] _1 KW[")"],
   NegativeLookbehind        -- KW["(?<!"] _1 KW[")"],
   PythonCapture             -- KW["(?P<"] _1 KW[">"] _2 KW[")"],
   RegexCapture              -- KW["("] _1 KW[")@{"] _2 KW["}"],
   Empty                     -- KW["()"],
   SingleCharacter           -- KW["."],
   LineStart                 -- KW["^"],
   LineEnd                   -- KW["$"],
   CharacterClass            -- _1,
   AtomLiteral               -- _1,
   AtomCharacter             -- _1,
   QuotedAtom                -- KW["\\Q"] _1 KW["\\E"],
   BracketList               -- V  [V vs=2 [KW["["] _1] KW["]"]],
   BracketList.1:iter        -- _1,
   NegatedBracketList        -- V  [V vs=2 [KW["[^"] _1] KW["]"]],
   NegatedBracketList.1:iter -- _1,
   Range                     -- _1 KW["-"] _2,
   Range.1:alt               -- _1 _2,
   Range.2:alt               -- _1 _2,
   Union                     -- _1,
   BracketLiteral            -- _1,
   BracketCharacter          -- _1,
   LowerClass                -- KW["Lower"],
   UpperClass                -- KW["Upper"],
   ASCIIClass                -- KW["ASCII"],
   AlphaClass                -- KW["Alpha"],
   DigitClass                -- KW["Digit"],
   AlnumClass                -- KW["Alnum"],
   PunctClass                -- KW["Punct"],
   GraphClass                -- KW["Graph"],
   PrintClass                -- KW["Print"],
   BlankClass                -- KW["Blank"],
   CntrlClass                -- KW["Cntrl"],
   XDigitClass               -- KW["XDigit"],
   WhiteSpace                -- KW["Space"],
   JavaIsLowerCase           -- KW["javaLowerCase"],
   JavaIsLowerCase           -- KW["javaUpperCase"],
   JavaIsWhitespace          -- KW["javaWhitespace"],
   JavaIsMirrored            -- KW["javaMirrored"],
   GreekBlock                -- KW["InGreek"],
   UppercaseLetter           -- KW["Lu"],
   CurrencySymbol            -- KW["Sc"],
   DoubleQuote               -- KW["\""],
   DoubleQuote               -- KW["\""],
   OctalChar                 -- KW["\\0"] _1,
   HexHexChar                -- KW["\\x"] _1,
   DecHexChar                -- KW["\\u"] _1,
   Tab                       -- KW["\\t"],
   Newline                   -- KW["\\n"],
   Return                    -- KW["\\r"],
   Formfeed                  -- KW["\\f"],
   Alarm                     -- KW["\\a"],
   Escape                    -- KW["\\e"],
   WordChar                  -- KW["\\w"],
   NonWordChar               -- KW["\\W"],
   WhiteSpaceChar            -- KW["\\s"],
   NonWhiteSpaceChar         -- KW["\\S"],
   DigitChar                 -- KW["\\d"],
   NonDigitChar              -- KW["\\D"],
   ControlCharacter          -- KW["\\c"] _1,
   WordBoundry               -- KW["\\b"],
   NonWordBoundry            -- KW["\\B"],
   InputBeginBoundry         -- KW["\\A"],
   PrevMatchEndBoundry       -- KW["\\G"],
   EndInputBoundry           -- KW["\\Z"],
   EndInputFinalBoundry      -- KW["\\z"],
   BackReference             -- KW["\\"] _1,
   Space                     -- KW["\\ "],
   Tab                       -- KW["\\\t"],
   Newline                   -- KW["\\\n"],
   OctalChar                 -- KW["\\0"] _1,
   HexHexChar                -- KW["\\x"] _1,
   DecHexChar                -- KW["\\u"] _1,
   Tab                       -- KW["\\t"],
   Newline                   -- KW["\\n"],
   Return                    -- KW["\\r"],
   Formfeed                  -- KW["\\f"],
   Alarm                     -- KW["\\a"],
   Escape                    -- KW["\\e"],
   WordChar                  -- KW["\\w"],
   NonWordChar               -- KW["\\W"],
   WhiteSpaceChar            -- KW["\\s"],
   NonWhiteSpaceChar         -- KW["\\S"],
   DigitChar                 -- KW["\\d"],
   NonDigitChar              -- KW["\\D"],
   ControlCharacter          -- KW["\\c"] _1,
   WordBoundry               -- KW["\\b"],
   NonWordBoundry            -- KW["\\B"],
   InputBeginBoundry         -- KW["\\A"],
   PrevMatchEndBoundry       -- KW["\\G"],
   EndInputBoundry           -- KW["\\Z"],
   EndInputFinalBoundry      -- KW["\\z"],
   BackReference             -- KW["\\"] _1,
   Space                     -- KW["\\ "],
   Tab                       -- KW["\\\t"],
   Newline                   -- KW["\\\n"],
   Quoted                    -- KW["\\"] _1,
   Quoted                    -- KW["\\"] _1,
   DoubleQuote               -- KW["\""],
   DoubleQuote               -- KW["\""],
   RegexId                   -- _1,
   present                   -- KW["e"] _1,
   absent                    -- ,
   real-con                  -- _1 KW["."] _2 _3,
   natural                   -- _1,
   positive                  -- KW["+"] _1,
   negative                  -- KW["-"] _1,
   quoted                    -- _1,
   unquoted                  -- _1,
   int                       -- _1,
   real                      -- _1,
   fun                       -- _1,
   appl                      -- _1 KW["("] _2 KW[")"],
   appl.2:iter-star-sep      -- _1 KW[","],
   appl                      -- _1 KW["("] _2 KW[")"],
   appl.2:iter-star-sep      -- _1 KW[","],
   placeholder               -- KW["<"] _1 KW[">"],
   list                      -- KW["["] _1 KW["]"],
   list.1:iter-star-sep      -- _1 KW[","],
   annotated                 -- _1 _2,
   default                   -- KW["{"] _1 KW["}"],
   default.1:iter-sep        -- _1 KW[","],
   testsuite                 -- _1 _2,
   testsuite.1:iter-star     -- _1,
   testsuite.2:iter-star     -- _1,
   CompletionHelper          -- KW["COMPLETION"] _1,
   Name                      -- KW["module"] _1,
   Package                   -- KW["package"] _1,
   TopSort                   -- KW["start"] KW["symbol"] _1,
   Language                  -- KW["language"] _1,
   CompletionDisable         -- KW["disable"] KW["completion"] KW["tests"],
   TargetTopSort             -- KW["target"] KW["start"] KW["symbol"] _1,
   TargetLanguage            -- KW["target"] KW["language"] _1,
   VarDecl                   -- _1 KW["="] _2,
   file                      -- KW["parse"] KW["to"] KW["file"] _1,
   pattern                   -- KW["parse"] KW["to"] _1,
   ParseOutput               -- KW["parse"] KW["to"] _1,
   FailsParsing              -- KW["parse"] KW["fails"],
   SuccessParsing            -- KW["parse"] KW["succeeds"],
   SuccessParsing            -- KW["parse"],
   file                      -- KW["file"] _1,
   Error                     -- _1 KW["error"],
   Errors                    -- _1 KW["errors"],
   Warning                   -- _1 KW["warning"],
   Warnings                  -- _1 KW["warnings"],
   Note                      -- _1 KW["note"],
   Notes                     -- _1 KW["notes"],
   Fatal                     -- _1 KW["fatal"] KW["error"],
   Fatals                    -- _1 KW["fatal"] KW["errors"],
   Resolve                   -- KW["resolve"] _1,
   ResolveTo                 -- KW["resolve"] _1 KW["to"] _2,
   Complete                  -- KW["complete"] _1,
   CompleteTo                -- KW["complete"] _1 KW["to"] _2,
   Build                     -- KW["build"] _1 _2 _3,
   Run                       -- KW["run"] _1 _2 _3,
   Refactor                  -- KW["refactor"] _1 _2 _3,
   None                      -- ,
   Argument                  -- KW["("] _1 KW[")"],
   wildcard                  -- ,
   File                      -- KW["to"] KW["file"] _1,
   Fragment                  -- KW["to"] _1,
   ATerm                     -- KW["to"] _1,
   Fails                     -- KW["fails"],
   Numbered                  -- KW["#"] _1,
   Unnumbered                -- ,
   CompletionHelper          -- KW["COMPLETION"] _1,
   wildcard                  -- KW["_"],
   wildcardvar               -- KW["..."],
   description               -- _1
]