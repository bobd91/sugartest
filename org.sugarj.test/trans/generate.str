module generate

imports
  include/SugarTest
  lib/editor-common.generated


// Largely re-written from the original (non-working) SpoofaxTesting code 

rules
	
	// Called from sugartest.str to generate a JUnit file for an list of tests
  to-java(|name):
    TestSuite(Language(language), setup, test*) ->
       (filepath, 
        $[[package]

          import org.junit.Test;
          import org.junit.Before;
          import org.junit.runner.RunWith;
					
          import org.sugarj.test.junit.TestParser;
          import org.sugarj.test.junit.TestRunner;
          import org.sugarj.test.junit.TestDescription;

          
          @RunWith(TestRunner.class)          
          public class [class] {
            
            private TestParser parser;
 
            @Before
            public void setup() {
              parser = new TestParser("[language]");
              [setup']
            }
            [test'*]
           }
        ])
    with 
      filepath := <get-filepath> name;
      package := <get-package> name;
      class := <get-class> name;
      setup' := <generate-setup <+ blank> setup;
      test'*   := <map-with-index(generate-test)> test*
  
  get-filepath = guarantee-extension(|"java")
  
  get-package = named-package <+ blank
  
  named-package =
    string-tokenize(|['/']);  // path to array with / separator
    ?[_|<id>];                // drop head
    init;                     // drop tail
    separate-by(|".");        // put dots between
    !["package " | <id>];     // put keyword in front
    concat-strings;           // flatten
    <strcat> (<id>, ";")      // put ; at end
  
  get-class = base-filename ; remove-extension
  
  // Used for missing setup or output blocks
  blank : _ -> $[]
  
  // Generate setup code for simple setup
  generate-setup :
    Some(SetupDecl(Setup(_,SetupPart(QuotePart(s)),_))) ->
      $[parser
        .before(
          [<add-lines> s]);]
      
  // Generate setup code for complex setup
  generate-setup :
    Some(SetupDecl(Setup(_,SetupPart(QuotePart(s1),_,QuotePart(s2)),_))) ->
      $[parser
        .before(
          [<add-lines> s1])
        .after(
          [<add-lines> s2]);]
        
  // Generate code for single test
  generate-test :
    (i, TestDecl(_,Description(desc),Test(inp,res))) ->  
      $[
        @Test
        @TestDescription("Test [desc']")
        public void test[i]() throws Exception {
          parser
          [input]
          [output]
          [expectation]
        }  
      ]  
      with
        desc' := <escape ; trim-whitespace> desc;
        input := <generate-input> inp;
        output := <generate-output <+ blank> res;
        expectation := <generate-expectation> res
  
  // Generate code for adding input text
  generate-input :
    Input(_,QuotePart(i),_) ->
      $[.input(
          [<add-lines> i])]
  
  // Generate code for adding expected parse output text
  generate-output :
    ParseOutput(Output(_,QuotePart(o),_)) ->
      $[.output(
          [<add-lines> o])]
      
  // Generate code for adding expected desugar output text
  generate-output :
    DesugarOutput(Output(_,QuotePart(o),_)) ->
      $[.output(
          [<add-lines> o])] 
  
  // Takes string with embedded newlines and produces string with each
  // line escaped, quoted and comma/newline separated
  // apple\norange\npear  ->  "apple",\n"orange",\n"pear" 
  add-lines:
    s -> <drop-trailing> $[[<get-lines ; map(add-line)> s]]
  
  // Escapes, quotes and adds comma and newline  
  add-line : 
    _ ->
    $["[<escape>]",
     ]
  
  // Remove trailing , newline and spaces
  drop-trailing = rtrim-chars(is-trailing)
  
  is-trailing = test('\n' + ',' + ' ' + '\t')
  
  // Generate required assertion based on expected result
  generate-expectation:
    SuccessParsing() -> $[.assertParseSuccess();]  
        
  generate-expectation:
    FailsParsing() -> $[.assertParseFailure();]  

  generate-expectation:
    ParsePattern(p) -> $[.assertParseMatchesATerm("[<format-aterm> p]");]
        
  generate-expectation:
    ParseOutput(_) -> $[.assertParseMatchesOutput();]  
      
  generate-expectation:
    ParseContainsPattern(p) -> $[.assertParseContainsATerm("[<format-aterm> p]");]  
        
  generate-expectation:
    DesugarOutput(_) -> $[.assertDesugarMatchesOutput();]  
        
  generate-expectation:
    DesugarContainsPattern(p) -> $[.assertDesugarContainsATerm("[<format-aterm> p]");]  

  // Use sugartest pp table as it extends ATerms with wildcards
  format-aterm =
    pp-sugartest-string ; escape
