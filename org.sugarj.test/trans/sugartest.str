module sugartest

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  include/SugarTest
  lib/editor-common.generated
  check
  generate
  test-runner
  editor/SugarTest-Outliner
  
rules
    
  editor-analyze:
    (ast, path, project-path) ->
    (ast', errors', warnings', notes')
    with
      editor-init;
      ast' := ast
    with
      (errors', warnings', notes') := <report-invalid-language> ast'
    <+
      scope-paths(
        <chdir> project-path;
        //<record-all-sdfs> ".";
        rules(
          InputFile := path
          Language := "SugarJ"
        );
	      errors := <collect-all(check-error, conc)> ast';
	      errors' := <flatten-list> [errors, <bagof-GrabbedErrors>];
	      warnings' := [];
	      notes' := [];
	      if not([] := errors) then
	          rules ( HasErrors := () )
        end
      | path, project-path
      )

  report-invalid-language:
    testsuite(h, _) -> ([error], [], [])
    where
      not(get-language);
      error := (h, $[Specify a language to be tested e.g., language Java])
    <+
      language := <get-language>;
      not(is-sugar-language(|language));
      error := (language, $[Language [language] not defined or not loaded])

 get-language:
    testsuite(Language(language), _) -> language

  generate-java:
    (selected, position, ast, path, project-path) -> result
    with
      scope-paths( result := <to-java(|<base-filename> path)> selected | path, project-path)
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  editor-hover:
    (QuotePart(_), position, ast, _, _) -> hover
    where
      _{ast2} := <parent-at-position(|position)> ast;
      hover := <hover-output> ast2

  hover-output =
  	if ?error(_, _) then
      extract-parse-error
    else 
      !$[The input string currently results in the following AST: 
          [<sugt-format-ast>]
        ]
    end 

  sugt-format-ast =
    sugt-pp-aterm ; sugt-html-ast
    
  sugt-html-ast =
    !$[<br />
       <br />
       <b>
        <pre>
          [<id>]
        </pre>
       </b>
      ]
     
  sugt-pp-aterm =
    topdown(strip-annos) ; pp-aterm-box ; box2text-string(|80)
    
  //external input-dialog(|title, message, initial)

strategies

  write-to-html-string =
    write-to-string;
    string-replace(|"&", "&amp;");
    string-replace(|"<", "&lt;");
    string-replace(|">", "&gt;")

strategies
  
  scope-paths(s | path, project-path) =
    {| current-path, current-project-path:
       rules(
         current-path := path
         current-project-path := project-path
       ) ; s
    |}
    
strategies
  sugt-ast-eq:
  	(ast1, ast2) -> result
  	where
  	  result := <eq> ((<topdown(strip-annos)> ast1), (<topdown(strip-annos)> ast2))
  	
strategies
  
  external plugin-get-property-values(|language)
  
  plugin-get-string-property:
    property -> value
    where
      plugin-get-property-values(|<Language>) => [property#([value|_]) | _]
      
  sugt-index-clear-file =
    try(<plugin-strategy-invoke(|<Language>, "index-clear-file")> <InputFile>)
	
  sugt-get-observer =
    <plugin-get-string-property> "SemanticObserver"
  
 
  external is-sugar-language(|language)
  
  external get-desugared-ast(|ast)

