module file-resolving
imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/SugarTest
  lib/editor-common.generated
  analysis
strategies

  scope-paths(s | path, project-path) =
    {| current-path, current-project-path: 
       rules( 
         current-path         := path
         current-project-path := project-path
       ) ; s
    |}
 
  check-error :
    file(f) -> (<id>, $[File '[f]' does not exist.])
    where 
      path := <current-path>
    ; <resolve-path(|path)> f
    ; not(file-exists)

  resolve-path(|basepath) =
    ?p
  ; if <is-abspath>p then 
        imp := p
      else 
        imp := <concat-strings> [ <abspath ; dirname>basepath, "/", p ] 
      end 

  editor-resolve:
    (file(f), position, ast, path, project-path) ->  <resolve-path(|path); open-editor>f

  editor-complete:
    (unquoted(COMPLETION(_)), _, _, _, _) -> proposals
    where  
      proposals := <all-keys-Constructor; string-sort>

  editor-complete:
    (TopSort(COMPLETION(s)), _, _, _, _) -> proposals
    where 
      proposals := <all-keys-TopSort ; string-sort>

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where 
      {| current-path, current-project-path: 
        rules( 
          current-path         := path
          current-project-path := project-path
        ) ;
        proposals := <propose-completion> node;
        not([])
      |}

  propose-completion :
    file(COMPLETION(s)) -> <complete-file(|s)> 
 
  complete-file(|s) =
    file := <base-filename <+ !"">s
  ; dir  := <dirname>s
  ; abs  := <resolve-path(|<current-path>)>dir 
  ; readdir 
  ; filter( 
      where(string-starts-with(|file)) 
    ; if !"/" => dir then 
        <concat-strings>["/", <id>] 
      else 
        <concat-strings>[dir, "/", <id>] 
      end 
    )
  ; string-sort
    
  external open-editor(|)

