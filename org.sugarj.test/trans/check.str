module check

imports
  libstratego-lib
  libstratego-aterm
  include/SugarTest
  lib/editor-common.generated
  aterm-eq
  sugartest


signature constructors
  error : Term * Term -> Term
  localized : Term * Term -> Term
  amb : List(Term) -> Term
  
rules
  

  check-error:
    Test(_, d, _, c*) -> (d, "Combination of test conditions is not supported")
    where
      // Base case: can never have > 1 condition
      <gt> (<length> c*, 1)

  check-error:
    TestEmpty(_, d) -> (<id>, "Empty test case")
  
  check-error:
    MarkedPlaceholder(_, _, _) -> (<id>, ${Placeholders of the form [[...]] are not yet supported; 
                                           place a 'footer' setup block at the end of the file instead})
  
  check-error:
    Test(_,description(d), i, expectations) -> (d, warnings)
    where
      (input, selections) := <Test-get-input <+ !(FailsParsing(), [])> i
    ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
        // TODO: set starting directory to project path using invoke-plugin-strategy
        plugin-strategy-invoke(|<Language>, "editor-init")
      ; input'     := (input, <InputFile>, <project-path>)
      ; messages   := <plugin-strategy-invoke(|<Language>, <sugt-get-observer>) <+ !([], [], [])> input'
      ; messages'  := <strip-and-record-analyzed-ast <+ reset-analyzed-ast(|input)> <try(?Some(<id>))> messages
      ; messages'' := <try((flatten-list, flatten-list, flatten-list))> messages'
      else
        messages'' := ([], [], [])
      end
    ; if !expectations => [] then
        warnings := <filter(check-expectation(|input, selections, messages''))> [SuccessParsing()]
      else
        warnings := <filter(check-expectation(|input, selections, messages''))> expectations
      end
    ; where(sugt-index-clear-file)
    ; not([]) 
   
  strip-and-record-analyzed-ast:
    (ast, e, w, n) -> (e, w, n)
    where
      rules(LastAnalyzedAst := ast)

  reset-analyzed-ast(|default) =
    rules(LastAnalyzedAst := default)

  external plugin-strategy-invoke(|language, name)
  
   
  Test-get-input :
    Input(_,_,_,_){a*} -> (parsed', selections)
    where
      !a* => [parsed | selections];
      if !parsed => Error(_) then
        parsed' := FailsParsing()
      else
        parsed' := parsed
      end
    <+
      // UNDONE: parsing from Stratego is no longer supported atm
      // parsed' := <spt-parse-string> s
      // warn(|"No ast annotation found")
    parsed' := FailsParsing()

  check-expectation(|ast, selections, messages) :
    <not(FailsParsing)> -> parse-failed
    where
      if !ast => FailsParsing() + !ast => error(_, _) then
        parse-failed := <extract-parse-error>
      <+
        parse-failed := "Fails to parse"
      end
  
  extract-parse-error =
    ?error(_, [localized(<id>, _) | _])

  check-expectation(|ast, selections, messages) :
    _ -> $[Observer error: [details]]
    where
      !messages => Error(details);
      say(!details)

  check-expectation(|ast, selections, messages) :
    FailsParsing() -> $[Parse failure expected: 
      [<sugt-format-ast> ast]
    ]
    where
      not(!ast => FailsParsing());
      not(!ast => error(_, _))

  check-expectation(|ast, selections, messages) :
    c -> $[Syntax is ambiguous: 
      [<sugt-format-ast> ast]
    ]
    where
      <oncetd(?amb(_))> ast;
      not(!c => pattern(_); oncetd(?unquoted("amb")))

  check-expectation(|ast, selections, messages) :
    pattern(p) -> $[Does not match pattern: 
      [<sugt-format-ast> ast]
    ]
    where
      exploded := <explode-aterm> ast
    ; not(<aterm-eq> (exploded, p))

  check-expectation(|ast, selections, messages) :
    containspattern(p) -> $[Does not contain pattern: 
      [<sugt-format-ast> ast]
    ]
    where
      exploded := <topdown(strip-annos) ; explode-aterm> ast
    ; not(<aterm-contains(|p)> exploded)

  check-expectation(|ast, selections, messages) :
    ParseOutput(_{^[output | _]}) -> $[Does not match expected: 
      [result]
    ]
    where
      not(<sugt-ast-eq> (ast, output))
    with
      result := <sugt-format-ast> ast
    <+
      result := $[[<write-to-html-string> ast] instead of [<write-to-html-string> ast]]

  check-expectation(|ast, selections, messages) :
    ParseDesugar(_{^[output | _]}) -> $[Does not match expected: 
      [result]
    ]
    where
      desugared := <get-desugared-ast(|ast)>
    ; not(<sugt-ast-eq> (desugared, output))
    with
      result := <sugt-format-ast> desugared
    <+
      result := $[[<write-to-html-string> desugared] instead of [<write-to-html-string> output]]

  match-message(|r):
    (term, message) -> <id>
    where
      message' := <lower-case> <try(concat-strings)> message;
      <is-substring(!r)> message'
  
  is-parse-only-test =
    SuccessParsing + FailsParsing + ?pattern(_) + ?ParseOutput(_)

  grab-messages:
    (errors, warnings, notes) -> <write-to-html-string> // TODO: make nice string?
    where
      rules(GrabbedErrors   :+= errors);
      rules(GrabbedWarnings :+= warnings);
      rules(GrabbedNotes    :+= notes)

  grab-errors:
    (errors, _, _) -> <write-to-html-string> errors // TODO: make nice string?
    where
      rules(GrabbedErrors :+= errors)

  grab-warnings:
    (_, warnings, _) -> <write-to-html-string> warnings // TODO: make nice string?
    where
      rules(GrabbedWarnings :+= warnings)

  is-grabbed-message(|grabbed):
    selection -> selection
    where
      <oncetd(origin-equal(|selection))> grabbed
    <+
      grabbed-terms := <map(try(Fst))> grabbed; 
      <one(\g -> <oncetd(origin-equal(|g))> selection\)> grabbed-terms

signature constructors
  
  Fail : String -> Term
  Error : String -> Term
  fun : AFun -> ATerm

rules

  external plugin-strategy-evaluate(print-trace |language, strategy)

  